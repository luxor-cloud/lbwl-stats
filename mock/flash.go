// Code generated by MockGen. DO NOT EDIT.
// Source: freggy.dev/stats/pkg/flash (interfaces: DataAccess)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	flash "freggy.dev/stats/pkg/flash"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataAccess is a mock of DataAccess interface
type MockDataAccess struct {
	ctrl     *gomock.Controller
	recorder *MockDataAccessMockRecorder
}

// MockDataAccessMockRecorder is the mock recorder for MockDataAccess
type MockDataAccessMockRecorder struct {
	mock *MockDataAccess
}

// NewMockDataAccess creates a new mock instance
func NewMockDataAccess(ctrl *gomock.Controller) *MockDataAccess {
	mock := &MockDataAccess{ctrl: ctrl}
	mock.recorder = &MockDataAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataAccess) EXPECT() *MockDataAccessMockRecorder {
	return m.recorder
}

// AddCheckpointScore mocks base method
func (m *MockDataAccess) AddCheckpointScore(arg0 context.Context, arg1 flash.PlayerCheckpointScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCheckpointScore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCheckpointScore indicates an expected call of AddCheckpointScore
func (mr *MockDataAccessMockRecorder) AddCheckpointScore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCheckpointScore", reflect.TypeOf((*MockDataAccess)(nil).AddCheckpointScore), arg0, arg1)
}

// AddMapScore mocks base method
func (m *MockDataAccess) AddMapScore(arg0 context.Context, arg1 flash.PlayerMapScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMapScore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMapScore indicates an expected call of AddMapScore
func (mr *MockDataAccessMockRecorder) AddMapScore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMapScore", reflect.TypeOf((*MockDataAccess)(nil).AddMapScore), arg0, arg1)
}

// Close mocks base method
func (m *MockDataAccess) Close(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDataAccessMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataAccess)(nil).Close), arg0)
}

// GetBestHighscore mocks base method
func (m *MockDataAccess) GetBestHighscore(arg0 context.Context, arg1 string) (flash.PlayerMapScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestHighscore", arg0, arg1)
	ret0, _ := ret[0].(flash.PlayerMapScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBestHighscore indicates an expected call of GetBestHighscore
func (mr *MockDataAccessMockRecorder) GetBestHighscore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestHighscore", reflect.TypeOf((*MockDataAccess)(nil).GetBestHighscore), arg0, arg1)
}

// GetBestHighscorePerCheckpointForMap mocks base method
func (m *MockDataAccess) GetBestHighscorePerCheckpointForMap(arg0 context.Context, arg1 string) ([]flash.PlayerCheckpointScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestHighscorePerCheckpointForMap", arg0, arg1)
	ret0, _ := ret[0].([]flash.PlayerCheckpointScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBestHighscorePerCheckpointForMap indicates an expected call of GetBestHighscorePerCheckpointForMap
func (mr *MockDataAccessMockRecorder) GetBestHighscorePerCheckpointForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestHighscorePerCheckpointForMap", reflect.TypeOf((*MockDataAccess)(nil).GetBestHighscorePerCheckpointForMap), arg0, arg1)
}

// GetHighscoreForMapByUUID mocks base method
func (m *MockDataAccess) GetHighscoreForMapByUUID(arg0 context.Context, arg1, arg2 string) (flash.PlayerMapScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighscoreForMapByUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(flash.PlayerMapScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighscoreForMapByUUID indicates an expected call of GetHighscoreForMapByUUID
func (mr *MockDataAccessMockRecorder) GetHighscoreForMapByUUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighscoreForMapByUUID", reflect.TypeOf((*MockDataAccess)(nil).GetHighscoreForMapByUUID), arg0, arg1, arg2)
}

// GetHighscorePerCheckpointForMapAndUUID mocks base method
func (m *MockDataAccess) GetHighscorePerCheckpointForMapAndUUID(arg0 context.Context, arg1, arg2 string) ([]flash.PlayerCheckpointScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighscorePerCheckpointForMapAndUUID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]flash.PlayerCheckpointScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighscorePerCheckpointForMapAndUUID indicates an expected call of GetHighscorePerCheckpointForMapAndUUID
func (mr *MockDataAccessMockRecorder) GetHighscorePerCheckpointForMapAndUUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighscorePerCheckpointForMapAndUUID", reflect.TypeOf((*MockDataAccess)(nil).GetHighscorePerCheckpointForMapAndUUID), arg0, arg1, arg2)
}

// GetHighscorePerMapByUUID mocks base method
func (m *MockDataAccess) GetHighscorePerMapByUUID(arg0 context.Context, arg1 string) ([]flash.PlayerMapScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighscorePerMapByUUID", arg0, arg1)
	ret0, _ := ret[0].([]flash.PlayerMapScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighscorePerMapByUUID indicates an expected call of GetHighscorePerMapByUUID
func (mr *MockDataAccessMockRecorder) GetHighscorePerMapByUUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighscorePerMapByUUID", reflect.TypeOf((*MockDataAccess)(nil).GetHighscorePerMapByUUID), arg0, arg1)
}

// GetPlayerStats mocks base method
func (m *MockDataAccess) GetPlayerStats(arg0 context.Context, arg1 string) (flash.PlayerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerStats", arg0, arg1)
	ret0, _ := ret[0].(flash.PlayerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerStats indicates an expected call of GetPlayerStats
func (mr *MockDataAccessMockRecorder) GetPlayerStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerStats", reflect.TypeOf((*MockDataAccess)(nil).GetPlayerStats), arg0, arg1)
}

// GetTopHighscores mocks base method
func (m *MockDataAccess) GetTopHighscores(arg0 context.Context, arg1 string, arg2 int) ([]flash.PlayerMapScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopHighscores", arg0, arg1, arg2)
	ret0, _ := ret[0].([]flash.PlayerMapScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopHighscores indicates an expected call of GetTopHighscores
func (mr *MockDataAccessMockRecorder) GetTopHighscores(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopHighscores", reflect.TypeOf((*MockDataAccess)(nil).GetTopHighscores), arg0, arg1, arg2)
}

// GetTopPlayerByPoints mocks base method
func (m *MockDataAccess) GetTopPlayerByPoints(arg0 context.Context, arg1 int) ([]flash.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopPlayerByPoints", arg0, arg1)
	ret0, _ := ret[0].([]flash.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPlayerByPoints indicates an expected call of GetTopPlayerByPoints
func (mr *MockDataAccessMockRecorder) GetTopPlayerByPoints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPlayerByPoints", reflect.TypeOf((*MockDataAccess)(nil).GetTopPlayerByPoints), arg0, arg1)
}

// UpdatePlayerStats mocks base method
func (m *MockDataAccess) UpdatePlayerStats(arg0 context.Context, arg1 flash.PlayerStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerStats", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerStats indicates an expected call of UpdatePlayerStats
func (mr *MockDataAccessMockRecorder) UpdatePlayerStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerStats", reflect.TypeOf((*MockDataAccess)(nil).UpdatePlayerStats), arg0, arg1)
}

// WithTX mocks base method
func (m *MockDataAccess) WithTX(arg0 context.Context) (flash.DataAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTX", arg0)
	ret0, _ := ret[0].(flash.DataAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTX indicates an expected call of WithTX
func (mr *MockDataAccessMockRecorder) WithTX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTX", reflect.TypeOf((*MockDataAccess)(nil).WithTX), arg0)
}
